import os
import logging
import random
import requests
import asyncio
from datetime import datetime
from typing import Dict, Optional, Tuple, List

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from dotenv import load_dotenv
from bs4 import BeautifulSoup
import feedparser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()

class ReliableNewsBot:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
        
        if not self.bot_token:
            raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ RSS
        self.categories = {
            'tech': {
                'name': 'üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
                'emoji': 'üíª',
                'rss': [
                    'https://habr.com/ru/rss/hub/python/',
                    'https://3dnews.ru/bitrix/rss.php',
                    'https://www.ixbt.com/export/news.rss',
                    'https://vc.ru/rss'
                ],
                'image_keywords': ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '—Ä–æ–±–æ—Ç'],
                'fallback_images': [
                    'https://images.unsplash.com/photo-1517430816045-df4b7de11d1d',
                    'https://images.unsplash.com/photo-1558494949-ef010cbdcc31'
                ],
                'fallback_articles': [
                    {'title': '–ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ IT', 'summary': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –±—ã—Å—Ç—Ä—ã–º–∏ —Ç–µ–º–ø–∞–º–∏...'},
                    {'title': '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', 'summary': '–ò–ò –º–µ–Ω—è–µ—Ç –Ω–∞—à –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á...'}
                ]
            },
            'politics': {
                'name': 'üèõ –ü–æ–ª–∏—Ç–∏–∫–∞',
                'emoji': 'üèõ',
                'rss': [
                    'https://lenta.ru/rss/news',
                    'https://www.kommersant.ru/RSS/news.xml',
                    'https://ria.ru/export/rss2/politics/index.xml',
                    'https://tass.ru/rss/v2.xml'
                ],
                'image_keywords': ['–ø–æ–ª–∏—Ç–∏–∫–∞', '–∫—Ä–µ–º–ª—å', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ'],
                'fallback_images': [
                    'https://images.unsplash.com/photo-1562601579-599dec564e06',
                    'https://images.unsplash.com/photo-1580130732478-4e339fb33746'
                ],
                'fallback_articles': [
                    {'title': '–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏', 'summary': '–í–∞–∂–Ω—ã–µ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç...'},
                    {'title': '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è', 'summary': '–°—Ç—Ä–∞–Ω—ã –æ–±—Å—É–∂–¥–∞—é—Ç –Ω–æ–≤—ã–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è...'}
                ]
            }
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ requests
        self.session = requests.Session()
        self.session.headers.update({'User-Agent': 'Mozilla/5.0'})
        self.current_article = None

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        buttons = [
            [KeyboardButton("üì∞ –°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å")],
            [KeyboardButton("üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"), KeyboardButton("üèõ –ü–æ–ª–∏—Ç–∏–∫–∞")],
            [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
        
        reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        
        await self.send_with_retry(
            update.message.reply_text,
            text="üì° *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Reliable News Bot!*\n\n–Ø –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥—É –¥–ª—è –≤–∞—Å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def send_with_retry(self, method, *args, max_retries=3, **kwargs):
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        for attempt in range(max_retries):
            try:
                return await method(*args, **kwargs)
            except Exception as e:
                if attempt == max_retries - 1:
                    raise
                await asyncio.sleep(1)
                continue

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = (
            "üÜò *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
            "üì∞ –°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å - —Å–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ - –Ω–æ–≤–æ—Å—Ç–∏ IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π\n"
            "üèõ –ü–æ–ª–∏—Ç–∏–∫–∞ - –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –Ω–æ–≤–æ—Å—Ç—è–º"
        )
        await self.send_with_retry(
            update.message.reply_text,
            text=help_text,
            parse_mode='Markdown'
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if text == "üì∞ –°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å":
            await self.random_news(update, context)
        elif text == "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏":
            await self.process_category(update, context, 'tech')
        elif text == "üèõ –ü–æ–ª–∏—Ç–∏–∫–∞":
            await self.process_category(update, context, 'politics')
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await self.help_command(update, context)
        else:
            await self.send_with_retry(
                update.message.reply_text,
                text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
            )

    async def random_news(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_id = random.choice(list(self.categories.keys()))
        await self.process_category(update, context, category_id)

    async def process_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE, category_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å
            success = await self.try_get_fresh_article(category_id)
            
            if not success:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é —Å—Ç–∞—Ç—å—é
                await self.use_fallback_article(category_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –±—É–¥–µ—Ç –∏–∑ fallback)
            image_url = await self.get_image_with_fallback()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            category = self.categories[category_id]
            post_text = (
                f"{category['emoji']} *{category['name']}*\n\n"
                f"üìå *{self.current_article['title']}*\n\n"
                f"{self.current_article['summary']}"
            )
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish"),
                    InlineKeyboardButton("üîÑ –ï—â–µ –Ω–æ–≤–æ—Å—Ç—å", callback_data=f"category_{category_id}")
                ],
                [
                    InlineKeyboardButton("üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", callback_data="category_tech"),
                    InlineKeyboardButton("üèõ –ü–æ–ª–∏—Ç–∏–∫–∞", callback_data="category_politics")
                ]
            ]
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            await self.send_news_message(
                update,
                image_url=image_url,
                caption=post_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            await self.send_with_retry(
                update.message.reply_text,
                text="üìå *–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏*\n\nüîß –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
                parse_mode='Markdown'
            )
            await self.use_fallback_article('tech')
            await self.process_category(update, context, 'tech')

    async def try_get_fresh_article(self, category_id: str) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂—É—é —Å—Ç–∞—Ç—å—é –∏–∑ RSS"""
        category = self.categories.get(category_id)
        if not category:
            return False
        
        for rss_url in category['rss']:
            try:
                response = await asyncio.to_thread(
                    self.session.get, rss_url, timeout=10
                )
                response.raise_for_status()
                
                feed = feedparser.parse(response.content)
                if not feed.entries:
                    continue
                
                entry = random.choice(feed.entries[:10])  # –ë–µ—Ä–µ–º –∏–∑ —Å–≤–µ–∂–∏—Ö
                
                # –û—á–∏—Å—Ç–∫–∞ HTML
                summary = getattr(entry, 'summary', entry.get('description', ''))
                soup = BeautifulSoup(summary, 'html.parser')
                clean_text = soup.get_text(separator=' ', strip=True)
                
                # –£–º–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ
                clean_text = clean_text[:250] + '...' if len(clean_text) > 250 else clean_text
                
                self.current_article = {
                    'title': entry.title,
                    'link': entry.link,
                    'summary': clean_text,
                    'category': category_id,
                    'is_fallback': False
                }
                return True
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ RSS {rss_url}: {str(e)}")
                continue
        
        return False

    async def use_fallback_article(self, category_id: str):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å—Ç–∞—Ç—å–∏"""
        category = self.categories[category_id]
        self.current_article = random.choice(category['fallback_articles'])
        self.current_article.update({
            'category': category_id,
            'is_fallback': True
        })

    async def get_image_with_fallback(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
        if not self.current_article:
            return random.choice(list(self.categories.values()))['fallback_images'][0]
        
        category = self.categories[self.current_article['category']]
        
        # 1. –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Å—Ç–∞—Ç—å–∏ (–µ—Å–ª–∏ –Ω–µ fallback)
        if not self.current_article.get('is_fallback', True):
            try:
                img = await self.extract_image_from_article()
                if img:
                    return img
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        
        # 2. –ü—Ä–æ–±—É–µ–º Unsplash
        try:
            keyword = random.choice(category['image_keywords'])
            url = f"https://source.unsplash.com/800x600/?{keyword}"
            
            resp = await asyncio.to_thread(self.session.head, url, timeout=5)
            if resp.status_code == 200:
                return url
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ Unsplash: {str(e)}")
        
        # 3. Fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return random.choice(category['fallback_images'])

    async def extract_image_from_article(self) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å—Ç–∞—Ç—å–∏"""
        if not self.current_article or not self.current_article.get('link'):
            return None
            
        try:
            response = await asyncio.to_thread(
                self.session.get, self.current_article['link'], timeout=10
            )
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ò—â–µ–º OpenGraph –∏–ª–∏ Twitter –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            for meta in soup.find_all('meta'):
                if meta.get('property') in ['og:image', 'twitter:image']:
                    if meta.get('content', '').startswith('http'):
                        return meta['content']
            
            # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç—å–µ
            for img in soup.find_all('img', src=True):
                if img['src'].startswith('http') and any(ext in img['src'] for ext in ['.jpg', '.jpeg', '.png']):
                    return img['src']
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—å–∏: {str(e)}")
            return None

    async def send_news_message(self, update, image_url: str, caption: str, reply_markup=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏"""
        try:
            if isinstance(update, Update):
                # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.send_with_retry(
                    update.message.reply_photo,
                    photo=image_url,
                    caption=caption,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                await self.send_with_retry(
                    update.edit_message_media,
                    media=InputMediaPhoto(
                        media=image_url,
                        caption=caption,
                        parse_mode='Markdown'
                    ),
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await self.send_with_retry(
                update.message.reply_text if isinstance(update, Update) else update.edit_message_text,
                text=caption,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data.startswith("category_"):
                category_id = query.data.split('_')[1]
                await self.process_category(query, context, category_id)
            elif query.data == "publish":
                await self.publish_article(query, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ callback: {str(e)}")
            await self.send_with_retry(
                query.edit_message_text,
                text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    async def publish_article(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –≤ –∫–∞–Ω–∞–ª"""
        if not self.current_article:
            await self.send_with_retry(
                query.edit_message_text,
                text="‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
            )
            return
        
        try:
            category = self.categories[self.current_article['category']]
            image_url = await self.get_image_with_fallback()
            
            post_text = (
                f"{category['emoji']} *{category['name']}*\n\n"
                f"üìå *{self.current_article['title']}*\n\n"
                f"{self.current_article['summary']}"
            )
            
            await self.send_with_retry(
                context.bot.send_photo,
                chat_id=self.channel_id,
                photo=image_url,
                caption=post_text,
                parse_mode='Markdown'
            )
            
            await self.send_with_retry(
                query.edit_message_text,
                text=f"‚úÖ *–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!*\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']}",
                parse_mode='Markdown'
            )
            
            self.current_article = None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
            await self.send_with_retry(
                query.edit_message_text,
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏"""
        app = Application.builder().token(self.bot_token).build()
        
        # –ö–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", self.start))
        app.add_handler(CommandHandler("help", self.help_command))
        app.add_handler(CommandHandler("random", self.random_news))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
        app.add_handler(CallbackQueryHandler(self.handle_callback))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        app.run_polling()

if __name__ == "__main__":
    try:
        bot = ReliableNewsBot()
        bot.run()
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")